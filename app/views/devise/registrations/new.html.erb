<div class="sign-in-reg">
  <div class="container form">
    <div class="row">
      <div class="col-sm-6 col-sm-offset-3 col-xs-12">
        <div class="form-header logo-inverse">
          <a href="/"><%= image_tag "leema-logo-white.png", class: 'img-responsive signin-logo' %></a>
        </div>
        <%= form_for(resource, as: resource_name, url: registration_path(resource_name) , :html => {:class => "well"}) do |f| %>
          <%= devise_error_messages! %>
          <fieldset>
            <legend>
              <h2>Sign Up</h2>
            </legend>
            <div class="form-group">
              <div><%= f.label :first_name %>
              <%= f.text_field :first_name, autofocus: true, class: 'form-control input_wide' %></div>
            </div>
            <div class="form-group">
              <div><%= f.label :last_name %>
              <%= f.text_field :last_name, class: 'form-control input_wide' %></div>
            </div>
            <div class="form-group">
              <div><%= f.label :email %>
              <%= f.email_field :email, class: 'form-control input_wide' %></div>
            </div>
            <div class="form-group">
              <div><%= f.label :password %> <% if @validatable %><i>(<%= @minimum_password_length %> characters minimum)</i><% end %><br />
                <%= f.password_field :password, autocomplete: "off", class: 'form-control input_wide' %></div>
            </div>
            <div class="form-group">
              <div><%= f.label :password_confirmation %>
                <%= f.password_field :password_confirmation, autocomplete: "off", class: 'form-control input_wide' %></div>
            </div>
            <div class="checkbox">
              <%= f.label :mailing_list do %>
                <%= f.check_box :mailing_list, :checked => true %> Treat my inbox with delicious emails from www.leemaeats.com
              <% end %>
            </div>
          </fieldset>
          <div class="text-center">
            <p><small>By submitting, I acknowledge that I have read, understand and agree to be bound by the leemaeats.com website <a href="/terms-of-use">Terms of Use</a> and <a href="/privacy-policy">Privacy Policy</a>.</small></p>
            <%= f.submit "Sign up", :class => "btn btn-primary" %>
          </div>
          <div class="text-right">
            Already a member? <%= render "devise/shared/links" %>
          </div>
          <%= link_to "Sign in with Facebook", user_omniauth_authorize_path(:facebook) %>

          <fb:login-button scope="public_profile,email" onlogin="checkLoginState();">
          </fb:login-button>

          <div id="status">
          </div>

          <% end %>
      </div><!-- close col -->
    </div><!-- close row -->
  
  </div><!-- close container -->
</div><!-- close sign-in-reg -->

<script>
  // This is called with the results from from FB.getLoginStatus().
  function statusChangeCallback(response) {
    console.log('statusChangeCallback');
    console.log(response);
    // The response object is returned with a status field that lets the
    // app know the current login status of the person.
    // Full docs on the response object can be found in the documentation
    // for FB.getLoginStatus().
    if (response.status === 'connected') {
      // Logged into your app and Facebook.
      testAPI();
    } else if (response.status === 'not_authorized') {
      // The person is logged into Facebook, but not your app.
      document.getElementById('status').innerHTML = 'Please log ' +
        'into this app.';
    } else {
      // The person is not logged into Facebook, so we're not sure if
      // they are logged into this app or not.
      document.getElementById('status').innerHTML = 'Please log ' +
        'into Facebook.';
    }
  }

  // This function is called when someone finishes with the Login
  // Button.  See the onlogin handler attached to it in the sample
  // code below.
  function checkLoginState() {
    FB.getLoginStatus(function(response) {
      statusChangeCallback(response);
    });
  }

  window.fbAsyncInit = function() {
  FB.init({
    appId      : '778387892228096',
    cookie     : true,  // enable cookies to allow the server to access 
                        // the session
    xfbml      : true,  // parse social plugins on this page
    version    : 'v2.2' // use version 2.2
  });

  // Now that we've initialized the JavaScript SDK, we call 
  // FB.getLoginStatus().  This function gets the state of the
  // person visiting this page and can return one of three states to
  // the callback you provide.  They can be:
  //
  // 1. Logged into your app ('connected')
  // 2. Logged into Facebook, but not your app ('not_authorized')
  // 3. Not logged into Facebook and can't tell if they are logged into
  //    your app or not.
  //
  // These three cases are handled in the callback function.

  FB.getLoginStatus(function(response) {
    statusChangeCallback(response);
  });

  };

  // Load the SDK asynchronously
  (function(d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) return;
    js = d.createElement(s); js.id = id;
    js.src = "//connect.facebook.net/en_US/sdk.js";
    fjs.parentNode.insertBefore(js, fjs);
  }(document, 'script', 'facebook-jssdk'));

  // Here we run a very simple test of the Graph API after login is
  // successful.  See statusChangeCallback() for when this call is made.
  function testAPI() {
    console.log('Welcome!  Fetching your information.... ');
    FB.api('/me', function(response) {
      console.log('Successful login for: ' + response.name);
      document.getElementById('status').innerHTML =
        'Thanks for logging in, ' + response.name + '!';
    });
  }
</script>
